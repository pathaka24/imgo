{"ast":null,"code":"import Panel from \"./panel.js\";\nconst _Stats = class _Stats {\n  constructor() {\n    let {\n      logsPerSecond = 20,\n      samplesLog = 100,\n      samplesGraph = 10,\n      precision = 2,\n      minimal = false,\n      horizontal = true,\n      mode = 0\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.mode = mode;\n    this.horizontal = horizontal;\n    this.container = document.createElement(\"div\");\n    this.container.style.cssText = \"position:fixed;top:0;left:0;opacity:0.9;z-index:10000;\";\n    if (minimal) {\n      this.container.style.cssText += \"cursor:pointer\";\n    }\n    this.gl = null;\n    this.query = null;\n    this.minimal = minimal;\n    this.beginTime = (performance || Date).now();\n    this.prevTime = this.beginTime;\n    this.prevCpuTime = this.beginTime;\n    this.frames = 0;\n    this.averageCpu = {\n      logs: [],\n      graph: []\n    };\n    this.averageGpu = {\n      logs: [],\n      graph: []\n    };\n    this.queryCreated = false;\n    this.fpsPanel = this.addPanel(new _Stats.Panel(\"FPS\", \"#0ff\", \"#002\"), 0);\n    this.msPanel = this.addPanel(new _Stats.Panel(\"CPU\", \"#0f0\", \"#020\"), 1);\n    this.gpuPanel = null;\n    this.samplesLog = samplesLog;\n    this.samplesGraph = samplesGraph;\n    this.precision = precision;\n    this.logsPerSecond = logsPerSecond;\n    if (this.minimal) {\n      this.container.addEventListener(\"click\", event => {\n        event.preventDefault();\n        this.showPanel(++this.mode % this.container.children.length);\n      }, false);\n      this.mode = mode;\n      this.showPanel(this.mode);\n    } else {\n      window.addEventListener(\"resize\", () => {\n        this.resizePanel(this.fpsPanel, 0);\n        this.resizePanel(this.msPanel, 1);\n        if (this.gpuPanel) {\n          this.resizePanel(this.gpuPanel, 2);\n        }\n      });\n    }\n  }\n  resizePanel(panel, offset) {\n    panel.canvas.style.position = \"absolute\";\n    if (this.minimal) {\n      panel.canvas.style.display = \"none\";\n    } else {\n      panel.canvas.style.display = \"block\";\n      if (this.horizontal) {\n        panel.canvas.style.top = \"0px\";\n        panel.canvas.style.left = offset * panel.WIDTH / panel.PR + \"px\";\n      } else {\n        panel.canvas.style.left = \"0px\";\n        panel.canvas.style.top = offset * panel.HEIGHT / panel.PR + \"px\";\n      }\n    }\n  }\n  addPanel(panel, offset) {\n    if (panel.canvas) {\n      this.container.appendChild(panel.canvas);\n      this.resizePanel(panel, offset);\n    }\n    return panel;\n  }\n  showPanel(id) {\n    for (let i = 0; i < this.container.children.length; i++) {\n      const child = this.container.children[i];\n      child.style.display = i === id ? \"block\" : \"none\";\n    }\n    this.mode = id;\n  }\n  init(canvasOrGL) {\n    if (!canvasOrGL) {\n      console.error('Stats: The \"canvas\" parameter is undefined.');\n      return;\n    }\n    if (canvasOrGL instanceof WebGL2RenderingContext) {\n      this.gl = canvasOrGL;\n    } else if (canvasOrGL instanceof HTMLCanvasElement || canvasOrGL instanceof OffscreenCanvas) {\n      this.gl = canvasOrGL.getContext(\"webgl2\");\n      if (!this.gl) {\n        console.error(\"Stats: Unable to obtain WebGL2 context.\");\n        return;\n      }\n    } else {\n      console.error(\"Stats: Invalid input type. Expected WebGL2RenderingContext, HTMLCanvasElement, or OffscreenCanvas.\");\n      return;\n    }\n    this.ext = this.gl.getExtension(\"EXT_disjoint_timer_query_webgl2\");\n    if (this.ext) {\n      this.gpuPanel = this.addPanel(new _Stats.Panel(\"GPU\", \"#ff0\", \"#220\"), 2);\n    }\n  }\n  begin() {\n    this.beginProfiling(\"cpu-started\");\n    if (!this.gl || !this.ext) return;\n    if (this.query) {\n      const available = this.gl.getQueryParameter(this.query, this.gl.QUERY_RESULT_AVAILABLE);\n      this.disjoint = this.gl.getParameter(this.ext.GPU_DISJOINT_EXT);\n      if (available && !this.disjoint) {\n        this.ns = this.gl.getQueryParameter(this.query, this.gl.QUERY_RESULT);\n        const ms = this.ns * 1e-6;\n        if (available || this.disjoint) {\n          this.gl.deleteQuery(this.query);\n          this.query = null;\n        }\n        if (available) {\n          this.addToAverage(ms, this.averageGpu);\n        }\n      }\n    }\n    if (!this.query) {\n      this.queryCreated = true;\n      this.query = this.gl.createQuery();\n      if (this.query) {\n        this.gl.beginQuery(this.ext.TIME_ELAPSED_EXT, this.query);\n      }\n    }\n  }\n  end() {\n    this.beginTime = this.endInternal();\n    this.endProfiling(\"cpu-started\", \"cpu-finished\", \"cpu-duration\", this.averageCpu);\n    if (!this.gl || !this.ext) return;\n    if (this.queryCreated && this.gl.getQuery(this.ext.TIME_ELAPSED_EXT, this.gl.CURRENT_QUERY)) {\n      this.gl.endQuery(this.ext.TIME_ELAPSED_EXT);\n    }\n  }\n  endInternal() {\n    this.frames++;\n    const time = (performance || Date).now();\n    if (time >= this.prevCpuTime + 1e3 / this.logsPerSecond) {\n      this.updatePanel(this.msPanel, this.averageCpu);\n      this.updatePanel(this.gpuPanel, this.averageGpu);\n      this.prevCpuTime = time;\n    }\n    if (time >= this.prevTime + 1e3) {\n      const fps = this.frames * 1e3 / (time - this.prevTime);\n      this.fpsPanel.update(fps, fps, 100, 100, 0);\n      this.prevTime = time;\n      this.frames = 0;\n    }\n    return time;\n  }\n  addToAverage(value, averageArray) {\n    averageArray.logs.push(value);\n    if (averageArray.logs.length > this.samplesLog) {\n      averageArray.logs.shift();\n    }\n    averageArray.graph.push(value);\n    if (averageArray.graph.length > this.samplesGraph) {\n      averageArray.graph.shift();\n    }\n  }\n  beginProfiling(marker) {\n    if (window.performance) {\n      window.performance.mark(marker);\n    }\n  }\n  endProfiling(startMarker, endMarker, measureName, averageArray) {\n    if (window.performance && endMarker) {\n      window.performance.mark(endMarker);\n      const cpuMeasure = performance.measure(measureName, startMarker, endMarker);\n      this.addToAverage(cpuMeasure.duration, averageArray);\n    }\n  }\n  updatePanel(panel, averageArray) {\n    if (averageArray.logs.length > 0) {\n      let sumLog = 0;\n      let max = 0.01;\n      for (let i = 0; i < averageArray.logs.length; i++) {\n        sumLog += averageArray.logs[i];\n        if (averageArray.logs[i] > max) {\n          max = averageArray.logs[i];\n        }\n      }\n      let sumGraph = 0;\n      let maxGraph = 0.01;\n      for (let i = 0; i < averageArray.graph.length; i++) {\n        sumGraph += averageArray.graph[i];\n        if (averageArray.graph[i] > maxGraph) {\n          maxGraph = averageArray.graph[i];\n        }\n      }\n      if (panel) {\n        panel.update(sumLog / Math.min(averageArray.logs.length, this.samplesLog), sumGraph / Math.min(averageArray.graph.length, this.samplesGraph), max, maxGraph, this.precision);\n      }\n    }\n  }\n};\n_Stats.Panel = Panel;\nlet Stats = _Stats;\nexport { Stats as default };","map":{"version":3,"names":["_Stats","constructor","logsPerSecond","samplesLog","samplesGraph","precision","minimal","horizontal","mode","arguments","length","undefined","container","document","createElement","style","cssText","gl","query","beginTime","performance","Date","now","prevTime","prevCpuTime","frames","averageCpu","logs","graph","averageGpu","queryCreated","fpsPanel","addPanel","Panel","msPanel","gpuPanel","addEventListener","event","preventDefault","showPanel","children","window","resizePanel","panel","offset","canvas","position","display","top","left","WIDTH","PR","HEIGHT","appendChild","id","i","child","init","canvasOrGL","console","error","WebGL2RenderingContext","HTMLCanvasElement","OffscreenCanvas","getContext","ext","getExtension","begin","beginProfiling","available","getQueryParameter","QUERY_RESULT_AVAILABLE","disjoint","getParameter","GPU_DISJOINT_EXT","ns","QUERY_RESULT","ms","deleteQuery","addToAverage","createQuery","beginQuery","TIME_ELAPSED_EXT","end","endInternal","endProfiling","getQuery","CURRENT_QUERY","endQuery","time","updatePanel","fps","update","value","averageArray","push","shift","marker","mark","startMarker","endMarker","measureName","cpuMeasure","measure","duration","sumLog","max","sumGraph","maxGraph","Math","min","Stats"],"sources":["D:\\productionApp\\imgo\\node_modules\\stats-gl\\lib\\main.ts"],"sourcesContent":["import Panel from \"./panel\";\n\nexport interface AverageArray {\n  logs: number[];\n  graph: number[];\n}\n\n\nclass Stats {\n  mode: number;\n  container: HTMLDivElement;\n  minimal: boolean;\n  horizontal: boolean;\n  beginTime: number;\n  prevTime: number;\n  prevCpuTime: number;\n  frames: number;\n  averageCpu: AverageArray;\n  averageGpu: AverageArray;\n  queryCreated: boolean;\n  fpsPanel: Panel;\n  static Panel: typeof Panel = Panel;\n  msPanel: Panel;\n  gpuPanel: Panel | null;\n  samplesLog: number;\n  samplesGraph: number;\n  logsPerSecond: number;\n  precision: number;\n  gl: WebGL2RenderingContext | null;\n  ext: any;\n  query: WebGLQuery | null;\n  disjoint: any;\n  ns: any;\n\n  constructor({ logsPerSecond = 20, samplesLog = 100, samplesGraph = 10, precision = 2, minimal = false, horizontal = true, mode = 0 } = {}) {\n\n    this.mode = mode;\n    this.horizontal = horizontal;\n    this.container = document.createElement('div');\n    this.container.style.cssText = 'position:fixed;top:0;left:0;opacity:0.9;z-index:10000;';\n\n    if (minimal) {\n\n      this.container.style.cssText += 'cursor:pointer';\n\n    }\n\n    this.gl = null;\n    this.query = null;\n\n    this.minimal = minimal;\n\n    this.beginTime = (performance || Date).now();\n    this.prevTime = this.beginTime;\n    this.prevCpuTime = this.beginTime;\n    this.frames = 0;\n    this.averageCpu = {\n      logs: [],\n      graph: []\n    };\n    this.averageGpu = {\n      logs: [],\n      graph: []\n    };\n\n    this.queryCreated = false;\n\n    this.fpsPanel = this.addPanel(new Stats.Panel('FPS', '#0ff', '#002'), 0);\n    this.msPanel = this.addPanel(new Stats.Panel('CPU', '#0f0', '#020'), 1);\n    this.gpuPanel = null;\n\n    this.samplesLog = samplesLog;\n    this.samplesGraph = samplesGraph;\n    this.precision = precision;\n    this.logsPerSecond = logsPerSecond;\n\n    if (this.minimal) {\n\n      this.container.addEventListener('click', (event) => {\n\n        event.preventDefault();\n        this.showPanel(++this.mode % this.container.children.length);\n\n      }, false);\n\n      this.mode = mode;\n      this.showPanel(this.mode);\n\n    } else {\n\n      window.addEventListener('resize', () => {\n\n        this.resizePanel(this.fpsPanel, 0);\n        this.resizePanel(this.msPanel, 1);\n\n        if (this.gpuPanel) {\n          this.resizePanel(this.gpuPanel, 2);\n        }\n      })\n    }\n\n  }\n\n  resizePanel(panel: Panel, offset: number) {\n\n    panel.canvas.style.position = 'absolute';\n\n    if (this.minimal) {\n\n      panel.canvas.style.display = 'none';\n\n    } else {\n\n      panel.canvas.style.display = 'block';\n      if (this.horizontal) {\n        panel.canvas.style.top = '0px';\n        panel.canvas.style.left = offset * panel.WIDTH / panel.PR + 'px';\n      } else {\n        panel.canvas.style.left = '0px';\n        panel.canvas.style.top = offset * panel.HEIGHT / panel.PR + 'px';\n\n      }\n    }\n  }\n\n  addPanel(panel: Panel, offset: number) {\n\n    if (panel.canvas) {\n\n      this.container.appendChild(panel.canvas);\n\n      this.resizePanel(panel, offset);\n\n    }\n\n    return panel;\n\n  }\n\n  showPanel(id: number) {\n\n    for (let i = 0; i < this.container.children.length; i++) {\n      const child = this.container.children[i] as HTMLElement;\n\n      child.style.display = i === id ? 'block' : 'none';\n\n    }\n\n    this.mode = id;\n\n  }\n\n  init(canvasOrGL: HTMLCanvasElement | OffscreenCanvas | WebGL2RenderingContext) {\n    if (!canvasOrGL) {\n      console.error('Stats: The \"canvas\" parameter is undefined.');\n      return;\n    }\n\n    // Check if canvasOrGL is already a WebGL2RenderingContext\n    if (canvasOrGL instanceof WebGL2RenderingContext) {\n      this.gl = canvasOrGL;\n    }\n    // Handle HTMLCanvasElement and OffscreenCanvas\n    else if (canvasOrGL instanceof HTMLCanvasElement || canvasOrGL instanceof OffscreenCanvas) {\n      this.gl = canvasOrGL.getContext('webgl2') as WebGL2RenderingContext;\n      if (!this.gl) {\n        console.error('Stats: Unable to obtain WebGL2 context.');\n        return;\n      }\n    } else {\n      console.error('Stats: Invalid input type. Expected WebGL2RenderingContext, HTMLCanvasElement, or OffscreenCanvas.');\n      return;\n    }\n\n    // Get the extension\n    this.ext = this.gl.getExtension('EXT_disjoint_timer_query_webgl2');\n    if (this.ext) {\n      this.gpuPanel = this.addPanel(new Stats.Panel('GPU', '#ff0', '#220'), 2);\n    }\n  }\n\n\n  begin() {\n\n    this.beginProfiling('cpu-started');\n    if (!this.gl || !this.ext) return;\n\n\n    if (this.query) {\n\n      const available = this.gl.getQueryParameter(this.query, this.gl.QUERY_RESULT_AVAILABLE);\n      this.disjoint = this.gl.getParameter(this.ext.GPU_DISJOINT_EXT);\n\n      if (available && !this.disjoint) {\n\n        this.ns = this.gl.getQueryParameter(this.query, this.gl.QUERY_RESULT);\n        const ms = this.ns * 1e-6;\n\n        if (available || this.disjoint) {\n\n          this.gl.deleteQuery(this.query);\n          this.query = null;\n\n        }\n\n        if (available) {\n\n          this.addToAverage(ms, this.averageGpu);\n\n        }\n\n      }\n\n    }\n\n    if (!this.query) {\n\n      this.queryCreated = true;\n      this.query = this.gl.createQuery();\n\n      if (this.query) {\n        this.gl.beginQuery(this.ext.TIME_ELAPSED_EXT, this.query);\n      }\n\n    }\n\n  }\n\n  end() {\n\n    this.beginTime = this.endInternal()\n\n    this.endProfiling('cpu-started', 'cpu-finished', 'cpu-duration', this.averageCpu);\n\n    if (!this.gl || !this.ext) return;\n\n\n    if (this.queryCreated && this.gl.getQuery(this.ext.TIME_ELAPSED_EXT, this.gl.CURRENT_QUERY)) {\n\n      this.gl.endQuery(this.ext.TIME_ELAPSED_EXT);\n\n    }\n\n\n  }\n\n  endInternal() {\n\n    this.frames++;\n    const time = (performance || Date).now();\n\n    if (time >= this.prevCpuTime + 1000 / this.logsPerSecond) {\n      this.updatePanel(this.msPanel, this.averageCpu);\n      this.updatePanel(this.gpuPanel, this.averageGpu);\n\n      this.prevCpuTime = time;\n    }\n\n    if (time >= this.prevTime + 1000) {\n\n      const fps = (this.frames * 1000) / (time - this.prevTime);\n\n      this.fpsPanel.update(fps, fps, 100, 100, 0);\n\n      this.prevTime = time;\n      this.frames = 0;\n\n    }\n\n    return time;\n\n  }\n\n  addToAverage(value: number, averageArray: { logs: any; graph: any; }) {\n\n    averageArray.logs.push(value);\n    if (averageArray.logs.length > this.samplesLog) {\n\n      averageArray.logs.shift();\n\n    }\n\n    averageArray.graph.push(value);\n    if (averageArray.graph.length > this.samplesGraph) {\n\n      averageArray.graph.shift();\n\n    }\n\n  }\n\n  beginProfiling(marker: string) {\n\n    if (window.performance) {\n\n      window.performance.mark(marker);\n\n    }\n\n  }\n\n  endProfiling(startMarker: string | PerformanceMeasureOptions | undefined, endMarker: string | undefined, measureName: string, averageArray: { logs: number[], graph: number[] }) {\n\n    if (window.performance && endMarker) {\n\n      window.performance.mark(endMarker);\n      const cpuMeasure = performance.measure(measureName, startMarker, endMarker);\n      this.addToAverage(cpuMeasure.duration, averageArray);\n\n    }\n\n  }\n\n  updatePanel(panel: { update: any; } | null, averageArray: { logs: number[], graph: number[] }) {\n\n    if (averageArray.logs.length > 0) {\n\n      let sumLog = 0;\n      let max = 0.01;\n\n      for (let i = 0; i < averageArray.logs.length; i++) {\n\n        sumLog += averageArray.logs[i];\n\n        if (averageArray.logs[i] > max) {\n          max = averageArray.logs[i];\n        }\n\n      }\n\n      let sumGraph = 0;\n      let maxGraph = 0.01;\n      for (let i = 0; i < averageArray.graph.length; i++) {\n\n        sumGraph += averageArray.graph[i];\n\n        if (averageArray.graph[i] > maxGraph) {\n          maxGraph = averageArray.graph[i];\n        }\n\n      }\n\n      if (panel) {\n        panel.update(sumLog / Math.min(averageArray.logs.length, this.samplesLog), sumGraph / Math.min(averageArray.graph.length, this.samplesGraph), max, maxGraph, this.precision);\n      }\n\n    }\n  }\n\n\n}\n\n\nexport default Stats;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}