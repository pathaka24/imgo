{"ast":null,"code":"const e = Symbol(),\n  t = Symbol(),\n  r = \"a\",\n  n = \"w\";\nlet o = (e, t) => new Proxy(e, t);\nconst s = Object.getPrototypeOf,\n  c = new WeakMap(),\n  l = e => e && (c.has(e) ? c.get(e) : s(e) === Object.prototype || s(e) === Array.prototype),\n  f = e => \"object\" == typeof e && null !== e,\n  i = e => {\n    if (Array.isArray(e)) return Array.from(e);\n    const t = Object.getOwnPropertyDescriptors(e);\n    return Object.values(t).forEach(e => {\n      e.configurable = !0;\n    }), Object.create(s(e), t);\n  },\n  u = e => e[t] || e,\n  a = (s, c, f, p) => {\n    if (!l(s)) return s;\n    let g = p && p.get(s);\n    if (!g) {\n      const e = u(s);\n      g = (e => Object.values(Object.getOwnPropertyDescriptors(e)).some(e => !e.configurable && !e.writable))(e) ? [e, i(e)] : [e], null == p || p.set(s, g);\n    }\n    const [y, h] = g;\n    let w = f && f.get(y);\n    return w && w[1].f === !!h || (w = ((o, s) => {\n      const c = {\n        f: s\n      };\n      let l = !1;\n      const f = (e, t) => {\n          if (!l) {\n            let s = c[r].get(o);\n            if (s || (s = {}, c[r].set(o, s)), e === n) s[n] = !0;else {\n              let r = s[e];\n              r || (r = new Set(), s[e] = r), r.add(t);\n            }\n          }\n        },\n        i = {\n          get: (e, n) => n === t ? o : (f(\"k\", n), a(Reflect.get(e, n), c[r], c.c)),\n          has: (t, n) => n === e ? (l = !0, c[r].delete(o), !0) : (f(\"h\", n), Reflect.has(t, n)),\n          getOwnPropertyDescriptor: (e, t) => (f(\"o\", t), Reflect.getOwnPropertyDescriptor(e, t)),\n          ownKeys: e => (f(n), Reflect.ownKeys(e))\n        };\n      return s && (i.set = i.deleteProperty = () => !1), [i, c];\n    })(y, !!h), w[1].p = o(h || y, w[0]), f && f.set(y, w)), w[1][r] = c, w[1].c = f, w[1].p;\n  },\n  p = (e, t, r, o) => {\n    if (Object.is(e, t)) return !1;\n    if (!f(e) || !f(t)) return !0;\n    const s = r.get(u(e));\n    if (!s) return !0;\n    if (o) {\n      const r = o.get(e);\n      if (r && r.n === t) return r.g;\n      o.set(e, {\n        n: t,\n        g: !1\n      });\n    }\n    let c = null;\n    try {\n      for (const r of s.h || []) if (c = Reflect.has(e, r) !== Reflect.has(t, r), c) return c;\n      if (!0 === s[n]) {\n        if (c = ((e, t) => {\n          const r = Reflect.ownKeys(e),\n            n = Reflect.ownKeys(t);\n          return r.length !== n.length || r.some((e, t) => e !== n[t]);\n        })(e, t), c) return c;\n      } else for (const r of s.o || []) if (c = !!Reflect.getOwnPropertyDescriptor(e, r) != !!Reflect.getOwnPropertyDescriptor(t, r), c) return c;\n      for (const n of s.k || []) if (c = p(e[n], t[n], r, o), c) return c;\n      return null === c && (c = !0), c;\n    } finally {\n      o && o.set(e, {\n        n: t,\n        g: c\n      });\n    }\n  },\n  g = t => !!l(t) && e in t,\n  y = e => l(e) && e[t] || null,\n  h = function (e) {\n    let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !0;\n    c.set(e, t);\n  },\n  w = (e, t, r) => {\n    const o = [],\n      s = new WeakSet(),\n      c = (e, l) => {\n        if (s.has(e)) return;\n        f(e) && s.add(e);\n        const i = f(e) && t.get(u(e));\n        if (i) {\n          var a, p;\n          if (null == (a = i.h) || a.forEach(e => {\n            const t = \":has(\".concat(String(e), \")\");\n            o.push(l ? [...l, t] : [t]);\n          }), !0 === i[n]) {\n            const e = \":ownKeys\";\n            o.push(l ? [...l, e] : [e]);\n          } else {\n            var g;\n            null == (g = i.o) || g.forEach(e => {\n              const t = \":hasOwn(\".concat(String(e), \")\");\n              o.push(l ? [...l, t] : [t]);\n            });\n          }\n          null == (p = i.k) || p.forEach(t => {\n            r && !(\"value\" in (Object.getOwnPropertyDescriptor(e, t) || {})) || c(e[t], l ? [...l, t] : [t]);\n          });\n        } else l && o.push(l);\n      };\n    return c(e), o;\n  },\n  O = e => {\n    o = e;\n  };\nexport { w as affectedToPathList, a as createProxy, y as getUntracked, p as isChanged, h as markToTrack, O as replaceNewProxy, g as trackMemo };","map":{"version":3,"names":["e","Symbol","t","r","n","o","newProxy","Proxy","s","Object","getPrototypeOf","c","WeakMap","l","has","get","prototype","Array","f","i","isArray","from","getOwnPropertyDescriptors","values","forEach","configurable","create","u","a","obj","p","g","some","writable","set","y","h","w","recordUsage","Set","add","Reflect","delete","getOwnPropertyDescriptor","ownKeys","deleteProperty","is","length","k","markToTrack","arguments","undefined","affectedToPathList","WeakSet","walk","concat","String","push","O","createProxy","getUntracked","isChanged","replaceNewProxy","trackMemo"],"sources":["D:\\productionApp\\imgo\\node_modules\\proxy-compare\\src\\index.ts"],"sourcesContent":["// symbols\nconst TRACK_MEMO_SYMBOL = Symbol();\nconst GET_ORIGINAL_SYMBOL = Symbol();\n\n// properties\nconst AFFECTED_PROPERTY = 'a';\nconst IS_TARGET_COPIED_PROPERTY = 'f';\nconst PROXY_PROPERTY = 'p';\nconst PROXY_CACHE_PROPERTY = 'c';\nconst NEXT_OBJECT_PROPERTY = 'n';\nconst CHANGED_PROPERTY = 'g';\nconst HAS_KEY_PROPERTY = 'h';\nconst ALL_OWN_KEYS_PROPERTY = 'w';\nconst HAS_OWN_KEY_PROPERTY = 'o';\nconst KEYS_PROPERTY = 'k';\n\n// function to create a new bare proxy\nlet newProxy = <T extends object>(\n  target: T,\n  handler: ProxyHandler<T>,\n) => new Proxy(target, handler);\n\n// get object prototype\nconst getProto = Object.getPrototypeOf;\n\nconst objectsToTrack = new WeakMap<object, boolean>();\n\n// check if obj is a plain object or an array\nconst isObjectToTrack = <T>(obj: T): obj is T extends object ? T : never => (\n  obj && (objectsToTrack.has(obj as unknown as object)\n    ? objectsToTrack.get(obj as unknown as object) as boolean\n    : (getProto(obj) === Object.prototype || getProto(obj) === Array.prototype)\n  )\n);\n\n// check if it is object\nconst isObject = (x: unknown): x is object => (\n  typeof x === 'object' && x !== null\n);\n\n// Properties that are both non-configurable and non-writable will break\n// the proxy get trap when we try to return a recursive/child compare proxy\n// from them. We can avoid this by making a copy of the target object with\n// all descriptors marked as configurable, see `copyTargetObject`.\n// See: https://github.com/dai-shi/proxy-compare/pull/8\nconst needsToCopyTargetObject = (obj: object) => (\n  Object.values(Object.getOwnPropertyDescriptors(obj)).some(\n    (descriptor) => !descriptor.configurable && !descriptor.writable,\n  )\n);\n\n// Make a copy with all descriptors marked as configurable.\nconst copyTargetObject = <T extends object>(obj: T): T => {\n  if (Array.isArray(obj)) {\n    // Arrays need a special way to copy\n    return Array.from(obj) as T;\n  }\n  // For non-array objects, we create a new object keeping the prototype\n  // with changing all configurable options (otherwise, proxies will complain)\n  const descriptors = Object.getOwnPropertyDescriptors(obj);\n  Object.values(descriptors).forEach((desc) => { desc.configurable = true; });\n  return Object.create(getProto(obj), descriptors);\n};\n\ntype HasKeySet = Set<string | symbol>\ntype HasOwnKeySet = Set<string | symbol>\ntype KeysSet = Set<string | symbol>\ntype Used = {\n  [HAS_KEY_PROPERTY]?: HasKeySet;\n  [ALL_OWN_KEYS_PROPERTY]?: true;\n  [HAS_OWN_KEY_PROPERTY]?: HasOwnKeySet;\n  [KEYS_PROPERTY]?: KeysSet;\n};\ntype Affected = WeakMap<object, Used>;\ntype ProxyHandlerState<T extends object> = {\n  readonly [IS_TARGET_COPIED_PROPERTY]: boolean;\n  [PROXY_PROPERTY]?: T;\n  [PROXY_CACHE_PROPERTY]?: ProxyCache<object> | undefined;\n  [AFFECTED_PROPERTY]?: Affected;\n}\ntype ProxyCache<T extends object> = WeakMap<\n  object,\n  readonly [ProxyHandler<T>, ProxyHandlerState<T>]\n>;\ntype TargetCache<T extends object> = WeakMap<\n  object,\n  readonly [target: T, copiedTarget?: T]\n>;\n\nconst createProxyHandler = <T extends object>(origObj: T, isTargetCopied: boolean) => {\n  const state: ProxyHandlerState<T> = {\n    [IS_TARGET_COPIED_PROPERTY]: isTargetCopied,\n  };\n  let trackObject = false; // for trackMemo\n  const recordUsage = (\n    type:\n      | typeof HAS_KEY_PROPERTY\n      | typeof ALL_OWN_KEYS_PROPERTY\n      | typeof HAS_OWN_KEY_PROPERTY\n      | typeof KEYS_PROPERTY,\n    key?: string | symbol,\n  ) => {\n    if (!trackObject) {\n      let used = (state[AFFECTED_PROPERTY] as Affected).get(origObj);\n      if (!used) {\n        used = {};\n        (state[AFFECTED_PROPERTY] as Affected).set(origObj, used);\n      }\n      if (type === ALL_OWN_KEYS_PROPERTY) {\n        used[ALL_OWN_KEYS_PROPERTY] = true;\n      } else {\n        let set = used[type];\n        if (!set) {\n          set = new Set();\n          used[type] = set;\n        }\n        set.add(key as string | symbol);\n      }\n    }\n  };\n  const recordObjectAsUsed = () => {\n    trackObject = true;\n    (state[AFFECTED_PROPERTY] as Affected).delete(origObj);\n  };\n  const handler: ProxyHandler<T> = {\n    get(target, key) {\n      if (key === GET_ORIGINAL_SYMBOL) {\n        return origObj;\n      }\n      recordUsage(KEYS_PROPERTY, key);\n      return createProxy(\n        Reflect.get(target, key),\n        (state[AFFECTED_PROPERTY] as Affected),\n        state[PROXY_CACHE_PROPERTY],\n      );\n    },\n    has(target, key) {\n      if (key === TRACK_MEMO_SYMBOL) {\n        recordObjectAsUsed();\n        return true;\n      }\n      recordUsage(HAS_KEY_PROPERTY, key);\n      return Reflect.has(target, key);\n    },\n    getOwnPropertyDescriptor(target, key) {\n      recordUsage(HAS_OWN_KEY_PROPERTY, key);\n      return Reflect.getOwnPropertyDescriptor(target, key);\n    },\n    ownKeys(target) {\n      recordUsage(ALL_OWN_KEYS_PROPERTY);\n      return Reflect.ownKeys(target);\n    },\n  };\n  if (isTargetCopied) {\n    handler.set = handler.deleteProperty = () => false;\n  }\n  return [handler, state] as const;\n};\n\nconst getOriginalObject = <T extends object>(obj: T) => (\n  // unwrap proxy\n  (obj as { [GET_ORIGINAL_SYMBOL]?: typeof obj })[GET_ORIGINAL_SYMBOL]\n  // otherwise\n  || obj\n);\n\n/**\n * Create a proxy.\n *\n * This function will create a proxy at top level and proxy nested objects as you access them,\n * in order to keep track of which properties were accessed via get/has proxy handlers:\n *\n * NOTE: Printing of WeakMap is hard to inspect and not very readable\n * for this purpose you can use the `affectedToPathList` helper.\n *\n * @param {object} obj - Object that will be wrapped on the proxy.\n * @param {WeakMap<object, unknown>} affected -\n * WeakMap that will hold the tracking of which properties in the proxied object were accessed.\n * @param {WeakMap<object, unknown>} [proxyCache] -\n * WeakMap that will help keep referential identity for proxies.\n * @returns {Proxy<object>} - Object wrapped in a proxy.\n *\n * @example\n * import { createProxy } from 'proxy-compare';\n *\n * const original = { a: \"1\", c: \"2\", d: { e: \"3\" } };\n * const affected = new WeakMap();\n * const proxy = createProxy(original, affected);\n *\n * proxy.a // Will mark as used and track its value.\n * // This will update the affected WeakMap with original as key\n * // and a Set with \"a\"\n *\n * proxy.d // Will mark \"d\" as accessed to track and proxy itself ({ e: \"3\" }).\n * // This will update the affected WeakMap with original as key\n * // and a Set with \"d\"\n */\nexport const createProxy = <T>(\n  obj: T,\n  affected: WeakMap<object, unknown>,\n  proxyCache?: WeakMap<object, unknown>,\n  targetCache?: WeakMap<object, unknown>,\n): T => {\n  if (!isObjectToTrack(obj)) return obj;\n  let targetAndCopied = (\n    targetCache && (targetCache as TargetCache<typeof obj>).get(obj)\n  );\n  if (!targetAndCopied) {\n    const target = getOriginalObject(obj);\n    if (needsToCopyTargetObject(target)) {\n      targetAndCopied = [target, copyTargetObject(target)];\n    } else {\n      targetAndCopied = [target];\n    }\n    targetCache?.set(obj, targetAndCopied);\n  }\n  const [target, copiedTarget] = targetAndCopied;\n  let handlerAndState = (\n    proxyCache && (proxyCache as ProxyCache<typeof target>).get(target)\n  );\n  if (\n    !handlerAndState\n    || handlerAndState[1][IS_TARGET_COPIED_PROPERTY] !== !!copiedTarget\n  ) {\n    handlerAndState = createProxyHandler<typeof target>(target, !!copiedTarget);\n    handlerAndState[1][PROXY_PROPERTY] = newProxy(\n      copiedTarget || target,\n      handlerAndState[0],\n    );\n    if (proxyCache) {\n      proxyCache.set(target, handlerAndState);\n    }\n  }\n  handlerAndState[1][AFFECTED_PROPERTY] = affected as Affected;\n  handlerAndState[1][PROXY_CACHE_PROPERTY] = proxyCache as ProxyCache<object> | undefined;\n  return handlerAndState[1][PROXY_PROPERTY] as typeof target;\n};\n\nconst isAllOwnKeysChanged = (prevObj: object, nextObj: object) => {\n  const prevKeys = Reflect.ownKeys(prevObj);\n  const nextKeys = Reflect.ownKeys(nextObj);\n  return prevKeys.length !== nextKeys.length\n    || prevKeys.some((k, i) => k !== nextKeys[i]);\n};\n\ntype ChangedCache = WeakMap<object, {\n  [NEXT_OBJECT_PROPERTY]: object;\n  [CHANGED_PROPERTY]: boolean;\n}>;\n\n/**\n * Compare changes on objects.\n *\n * This will compare the affected properties on tracked objects inside the proxy\n * to check if there were any changes made to it,\n * by default if no property was accessed on the proxy it will attempt to do a\n * reference equality check for the objects provided (Object.is(a, b)). If you access a property\n * on the proxy, then isChanged will only compare the affected properties.\n *\n * @param {object} prevObj - The previous object to compare.\n * @param {object} nextObj - Object to compare with the previous one.\n * @param {WeakMap<object, unknown>} affected -\n * WeakMap that holds the tracking of which properties in the proxied object were accessed.\n * @param {WeakMap<object, unknown>} [cache] -\n * WeakMap that holds a cache of the comparisons for better performance with repetitive comparisons,\n * and to avoid infinite loop with circular structures.\n * @returns {boolean} - Boolean indicating if the affected property on the object has changed.\n *\n * @example\n * import { createProxy, isChanged } from 'proxy-compare';\n *\n * const obj = { a: \"1\", c: \"2\", d: { e: \"3\" } };\n * const affected = new WeakMap();\n *\n * const proxy = createProxy(obj, affected);\n *\n * proxy.a\n *\n * isChanged(obj, { a: \"1\" }, affected) // false\n *\n * proxy.a = \"2\"\n *\n * isChanged(obj, { a: \"1\" }, affected) // true\n */\n\nexport const isChanged = (\n  prevObj: unknown,\n  nextObj: unknown,\n  affected: WeakMap<object, unknown>,\n  cache?: WeakMap<object, unknown>,\n): boolean => {\n  if (Object.is(prevObj, nextObj)) {\n    return false;\n  }\n  if (!isObject(prevObj) || !isObject(nextObj)) return true;\n  const used = (affected as Affected).get(getOriginalObject(prevObj));\n  if (!used) return true;\n  if (cache) {\n    const hit = (cache as ChangedCache).get(prevObj);\n    if (hit && hit[NEXT_OBJECT_PROPERTY] === nextObj) {\n      return hit[CHANGED_PROPERTY];\n    }\n    // for object with cycles\n    (cache as ChangedCache).set(prevObj, {\n      [NEXT_OBJECT_PROPERTY]: nextObj,\n      [CHANGED_PROPERTY]: false,\n    });\n  }\n  let changed: boolean | null = null;\n  try {\n    for (const key of used[HAS_KEY_PROPERTY] || []) {\n      changed = Reflect.has(prevObj, key) !== Reflect.has(nextObj, key);\n      if (changed) return changed;\n    }\n    if (used[ALL_OWN_KEYS_PROPERTY] === true) {\n      changed = isAllOwnKeysChanged(prevObj, nextObj);\n      if (changed) return changed;\n    } else {\n      for (const key of used[HAS_OWN_KEY_PROPERTY] || []) {\n        const hasPrev = !!Reflect.getOwnPropertyDescriptor(prevObj, key);\n        const hasNext = !!Reflect.getOwnPropertyDescriptor(nextObj, key);\n        changed = hasPrev !== hasNext;\n        if (changed) return changed;\n      }\n    }\n    for (const key of used[KEYS_PROPERTY] || []) {\n      changed = isChanged(\n        (prevObj as any)[key],\n        (nextObj as any)[key],\n        affected,\n        cache,\n      );\n      if (changed) return changed;\n    }\n    if (changed === null) changed = true;\n    return changed;\n  } finally {\n    if (cache) {\n      cache.set(prevObj, {\n        [NEXT_OBJECT_PROPERTY]: nextObj,\n        [CHANGED_PROPERTY]: changed,\n      });\n    }\n  }\n};\n\n// explicitly track object with memo\nexport const trackMemo = (obj: unknown) => {\n  if (isObjectToTrack(obj)) {\n    return TRACK_MEMO_SYMBOL in obj;\n  }\n  return false;\n};\n\n/**\n * Unwrap proxy to get the original object.\n *\n * Used to retrieve the original object used to create the proxy instance with `createProxy`.\n *\n * @param {Proxy<object>} obj -  The proxy wrapper of the originial object.\n * @returns {object | null} - Return either the unwrapped object if exists.\n *\n * @example\n * import { createProxy, getUntracked } from 'proxy-compare';\n *\n * const original = { a: \"1\", c: \"2\", d: { e: \"3\" } };\n * const affected = new WeakMap();\n *\n * const proxy = createProxy(original, affected);\n * const originalFromProxy = getUntracked(proxy)\n *\n * Object.is(original, originalFromProxy) // true\n * isChanged(original, originalFromProxy, affected) // false\n */\nexport const getUntracked = <T>(obj: T): T | null => {\n  if (isObjectToTrack(obj)) {\n    return (obj as { [GET_ORIGINAL_SYMBOL]?: T })[GET_ORIGINAL_SYMBOL] || null;\n  }\n  return null;\n};\n\n/**\n * Mark object to be tracked.\n *\n * This function marks an object that will be passed into `createProxy`\n * as marked to track or not. By default only Array and Object are marked to track,\n * so this is useful for example to mark a class instance to track or to mark a object\n * to be untracked when creating your proxy.\n *\n * @param obj - Object to mark as tracked or not.\n * @param mark - Boolean indicating whether you want to track this object or not.\n * @returns - No return.\n *\n * @example\n * import { createProxy, markToTrack, isChanged } from 'proxy-compare';\n *\n * const nested = { e: \"3\" }\n *\n * markToTrack(nested, false)\n *\n * const original = { a: \"1\", c: \"2\", d: nested };\n * const affected = new WeakMap();\n *\n * const proxy = createProxy(original, affected);\n *\n * proxy.d.e\n *\n * isChanged(original, { d: { e: \"3\" } }, affected) // true\n */\nexport const markToTrack = (obj: object, mark = true) => {\n  objectsToTrack.set(obj, mark);\n};\n\n/**\n * Convert `affected` to path list\n *\n * `affected` is a weak map which is not printable.\n * This function is can convert it to printable path list.\n * It's for debugging purpose.\n *\n * @param obj - An object that is used with `createProxy`.\n * @param affected - A weak map that is used with `createProxy`.\n * @param onlyWithValues - An optional boolean to exclude object getters.\n * @returns - An array of paths.\n */\nexport const affectedToPathList = (\n  obj: unknown,\n  affected: WeakMap<object, unknown>,\n  onlyWithValues?: boolean,\n) => {\n  const list: (string | symbol)[][] = [];\n  const seen = new WeakSet();\n  const walk = (x: unknown, path?: (string | symbol)[]) => {\n    if (seen.has(x as object)) {\n      // for object with cycles\n      return;\n    }\n    if (isObject(x)) {\n      seen.add(x);\n    }\n    const used = isObject(x) && (affected as Affected).get(getOriginalObject(x));\n    if (used) {\n      used[HAS_KEY_PROPERTY]?.forEach((key) => {\n        const segment = `:has(${String(key)})`;\n        list.push(path ? [...path, segment] : [segment]);\n      });\n      if (used[ALL_OWN_KEYS_PROPERTY] === true) {\n        const segment = ':ownKeys';\n        list.push(path ? [...path, segment] : [segment]);\n      } else {\n        used[HAS_OWN_KEY_PROPERTY]?.forEach((key) => {\n          const segment = `:hasOwn(${String(key)})`;\n          list.push(path ? [...path, segment] : [segment]);\n        });\n      }\n      used[KEYS_PROPERTY]?.forEach((key) => {\n        if (!onlyWithValues || 'value' in (Object.getOwnPropertyDescriptor(x, key) || {})) {\n          walk((x as any)[key], path ? [...path, key] : [key]);\n        }\n      });\n    } else if (path) {\n      list.push(path);\n    }\n  };\n  walk(obj);\n  return list;\n};\n\n/**\n * replace newProxy function.\n *\n * This can be used if you want to use proxy-polyfill.\n * Note that proxy-polyfill can't polyfill everything.\n * Use it at your own risk.\n */\nexport const replaceNewProxy = (fn: typeof newProxy) => {\n  newProxy = fn;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}