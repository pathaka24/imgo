{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\nimport { shaderMaterial } from './shaderMaterial.js';\nimport { useThree, extend, applyProps } from '@react-three/fiber';\nimport { toCreasedNormals } from 'three-stdlib';\nimport { version } from '../helpers/constants.js';\nconst OutlinesMaterial = /* @__PURE__ */shaderMaterial({\n  screenspace: false,\n  color: /* @__PURE__ */new THREE.Color('black'),\n  opacity: 1,\n  thickness: 0.05,\n  size: /* @__PURE__ */new THREE.Vector2()\n}, \"#include <common>\\n   #include <morphtarget_pars_vertex>\\n   #include <skinning_pars_vertex>\\n   uniform float thickness;\\n   uniform float screenspace;\\n   uniform vec2 size;\\n   void main() {\\n     #if defined (USE_SKINNING)\\n\\t     #include <beginnormal_vertex>\\n       #include <morphnormal_vertex>\\n       #include <skinbase_vertex>\\n       #include <skinnormal_vertex>\\n       #include <defaultnormal_vertex>\\n     #endif\\n     #include <begin_vertex>\\n\\t   #include <morphtarget_vertex>\\n\\t   #include <skinning_vertex>\\n     #include <project_vertex>\\n     vec4 tNormal = vec4(normal, 0.0);\\n     vec4 tPosition = vec4(transformed, 1.0);\\n     #ifdef USE_INSTANCING\\n       tNormal = instanceMatrix * tNormal;\\n       tPosition = instanceMatrix * tPosition;\\n     #endif\\n     if (screenspace == 0.0) {\\n       vec3 newPosition = tPosition.xyz + tNormal.xyz * thickness;\\n       gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0); \\n     } else {\\n       vec4 clipPosition = projectionMatrix * modelViewMatrix * tPosition;\\n       vec4 clipNormal = projectionMatrix * modelViewMatrix * tNormal;\\n       vec2 offset = normalize(clipNormal.xy) * thickness / size * clipPosition.w * 2.0;\\n       clipPosition.xy += offset;\\n       gl_Position = clipPosition;\\n     }\\n   }\", \"uniform vec3 color;\\n   uniform float opacity;\\n   void main(){\\n     gl_FragColor = vec4(color, opacity);\\n     #include <tonemapping_fragment>\\n     #include <\".concat(version >= 154 ? 'colorspace_fragment' : 'encodings_fragment', \">\\n   }\"));\nfunction Outlines(_ref) {\n  let {\n    color = 'black',\n    opacity = 1,\n    transparent = false,\n    screenspace = false,\n    toneMapped = true,\n    polygonOffset = false,\n    polygonOffsetFactor = 0,\n    renderOrder = 0,\n    thickness = 0.05,\n    angle = Math.PI,\n    ...props\n  } = _ref;\n  var _ref$current;\n  const ref = React.useRef(null);\n  const [material] = React.useState(() => new OutlinesMaterial({\n    side: THREE.BackSide\n  }));\n  const {\n    gl\n  } = useThree();\n  const contextSize = gl.getDrawingBufferSize(new THREE.Vector2());\n  React.useMemo(() => extend({\n    OutlinesMaterial\n  }), []);\n  React.useLayoutEffect(() => {\n    const group = ref.current;\n    const parent = group.parent;\n    if (parent && parent.geometry) {\n      let mesh;\n      if (parent.skeleton) {\n        mesh = new THREE.SkinnedMesh();\n        mesh.material = material;\n        mesh.bind(parent.skeleton, parent.bindMatrix);\n        group.add(mesh);\n      } else if (parent.isInstancedMesh) {\n        mesh = new THREE.InstancedMesh(parent.geometry, material, parent.count);\n        mesh.instanceMatrix = parent.instanceMatrix;\n        group.add(mesh);\n      } else {\n        mesh = new THREE.Mesh();\n        mesh.material = material;\n        group.add(mesh);\n      }\n      mesh.geometry = angle ? toCreasedNormals(parent.geometry, angle) : parent.geometry;\n      return () => {\n        if (angle) mesh.geometry.dispose();\n        group.remove(mesh);\n      };\n    }\n  }, [angle, (_ref$current = ref.current) == null || (_ref$current = _ref$current.parent) == null ? void 0 : _ref$current.geometry]);\n  React.useLayoutEffect(() => {\n    const group = ref.current;\n    const mesh = group.children[0];\n    if (mesh) {\n      mesh.renderOrder = renderOrder;\n      applyProps(mesh.material, {\n        transparent,\n        thickness,\n        color,\n        opacity,\n        size: contextSize,\n        screenspace,\n        toneMapped,\n        polygonOffset,\n        polygonOffsetFactor\n      });\n    }\n  }, [angle, transparent, thickness, color, opacity, screenspace, toneMapped, polygonOffset, polygonOffsetFactor, contextSize, renderOrder]);\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    ref: ref\n  }, props));\n}\nexport { Outlines };","map":{"version":3,"names":["_extends","THREE","React","shaderMaterial","useThree","extend","applyProps","toCreasedNormals","version","OutlinesMaterial","screenspace","color","Color","opacity","thickness","size","Vector2","concat","Outlines","_ref","transparent","toneMapped","polygonOffset","polygonOffsetFactor","renderOrder","angle","Math","PI","props","_ref$current","ref","useRef","material","useState","side","BackSide","gl","contextSize","getDrawingBufferSize","useMemo","useLayoutEffect","group","current","parent","geometry","mesh","skeleton","SkinnedMesh","bind","bindMatrix","add","isInstancedMesh","InstancedMesh","count","instanceMatrix","Mesh","dispose","remove","children","createElement"],"sources":["D:/productionApp/imgo/node_modules/@react-three/drei/core/Outlines.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\nimport { shaderMaterial } from './shaderMaterial.js';\nimport { useThree, extend, applyProps } from '@react-three/fiber';\nimport { toCreasedNormals } from 'three-stdlib';\nimport { version } from '../helpers/constants.js';\n\nconst OutlinesMaterial = /* @__PURE__ */shaderMaterial({\n  screenspace: false,\n  color: /* @__PURE__ */new THREE.Color('black'),\n  opacity: 1,\n  thickness: 0.05,\n  size: /* @__PURE__ */new THREE.Vector2()\n}, `#include <common>\n   #include <morphtarget_pars_vertex>\n   #include <skinning_pars_vertex>\n   uniform float thickness;\n   uniform float screenspace;\n   uniform vec2 size;\n   void main() {\n     #if defined (USE_SKINNING)\n\t     #include <beginnormal_vertex>\n       #include <morphnormal_vertex>\n       #include <skinbase_vertex>\n       #include <skinnormal_vertex>\n       #include <defaultnormal_vertex>\n     #endif\n     #include <begin_vertex>\n\t   #include <morphtarget_vertex>\n\t   #include <skinning_vertex>\n     #include <project_vertex>\n     vec4 tNormal = vec4(normal, 0.0);\n     vec4 tPosition = vec4(transformed, 1.0);\n     #ifdef USE_INSTANCING\n       tNormal = instanceMatrix * tNormal;\n       tPosition = instanceMatrix * tPosition;\n     #endif\n     if (screenspace == 0.0) {\n       vec3 newPosition = tPosition.xyz + tNormal.xyz * thickness;\n       gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0); \n     } else {\n       vec4 clipPosition = projectionMatrix * modelViewMatrix * tPosition;\n       vec4 clipNormal = projectionMatrix * modelViewMatrix * tNormal;\n       vec2 offset = normalize(clipNormal.xy) * thickness / size * clipPosition.w * 2.0;\n       clipPosition.xy += offset;\n       gl_Position = clipPosition;\n     }\n   }`, `uniform vec3 color;\n   uniform float opacity;\n   void main(){\n     gl_FragColor = vec4(color, opacity);\n     #include <tonemapping_fragment>\n     #include <${version >= 154 ? 'colorspace_fragment' : 'encodings_fragment'}>\n   }`);\nfunction Outlines({\n  color = 'black',\n  opacity = 1,\n  transparent = false,\n  screenspace = false,\n  toneMapped = true,\n  polygonOffset = false,\n  polygonOffsetFactor = 0,\n  renderOrder = 0,\n  thickness = 0.05,\n  angle = Math.PI,\n  ...props\n}) {\n  var _ref$current;\n  const ref = React.useRef(null);\n  const [material] = React.useState(() => new OutlinesMaterial({\n    side: THREE.BackSide\n  }));\n  const {\n    gl\n  } = useThree();\n  const contextSize = gl.getDrawingBufferSize(new THREE.Vector2());\n  React.useMemo(() => extend({\n    OutlinesMaterial\n  }), []);\n  React.useLayoutEffect(() => {\n    const group = ref.current;\n    const parent = group.parent;\n    if (parent && parent.geometry) {\n      let mesh;\n      if (parent.skeleton) {\n        mesh = new THREE.SkinnedMesh();\n        mesh.material = material;\n        mesh.bind(parent.skeleton, parent.bindMatrix);\n        group.add(mesh);\n      } else if (parent.isInstancedMesh) {\n        mesh = new THREE.InstancedMesh(parent.geometry, material, parent.count);\n        mesh.instanceMatrix = parent.instanceMatrix;\n        group.add(mesh);\n      } else {\n        mesh = new THREE.Mesh();\n        mesh.material = material;\n        group.add(mesh);\n      }\n      mesh.geometry = angle ? toCreasedNormals(parent.geometry, angle) : parent.geometry;\n      return () => {\n        if (angle) mesh.geometry.dispose();\n        group.remove(mesh);\n      };\n    }\n  }, [angle, (_ref$current = ref.current) == null || (_ref$current = _ref$current.parent) == null ? void 0 : _ref$current.geometry]);\n  React.useLayoutEffect(() => {\n    const group = ref.current;\n    const mesh = group.children[0];\n    if (mesh) {\n      mesh.renderOrder = renderOrder;\n      applyProps(mesh.material, {\n        transparent,\n        thickness,\n        color,\n        opacity,\n        size: contextSize,\n        screenspace,\n        toneMapped,\n        polygonOffset,\n        polygonOffsetFactor\n      });\n    }\n  }, [angle, transparent, thickness, color, opacity, screenspace, toneMapped, polygonOffset, polygonOffsetFactor, contextSize, renderOrder]);\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    ref: ref\n  }, props));\n}\n\nexport { Outlines };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}